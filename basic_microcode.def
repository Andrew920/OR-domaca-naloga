fetch:	addrsel=pc irload=1
	pcload=1  pcsel=pc, opcode_jump

# add Rd,Rs,Rt
0:	aluop=add  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch	

# sub Rd,Rs,Rt
1:	aluop=sub  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

# mul Rd,Rs,Rt
2:	aluop=mul  op2sel=treg  dwrite=1  regsrc=aluout, goto fetch

# jle Rs,Rt,immed (36)
36:	addrsel=pc  imload=1
	aluop=sub  op2sel=treg, if n then jump elif z jump else pcincr

# jlt Rs,Rt,immed (37)
37:	addrsel=pc  imload=1
	aluop=sub  op2sel=treg, if n then jump else pcincr

# JNEZ Rs,immed  ; If Rs != 0, PC <- immed else  PC <- PC + 2
40:	addrsel=pc  imload=1
	aluop=sub  op2sel=const0, if z then pcincr else jump

# jmp immed
45: addrsel=pc  imload=1								            
	pcload=1  pcsel=immed, goto fetch

# li Rd,Immed    ; Load immediate Rd, immed
63:	addrsel=pc  dwrite=1  regsrc=databus, goto pcincr

# lw Rd,immed (64)
64:	addrsel=pc  imload=1
	addrsel=immed  dwrite=1  datasel=dreg, goto pcincr

# sw Rd,immed    ; Store Rd into M[immed] Rd->M[immed];
65:	addrsel=pc  imload=1
	addrsel=immed  datawrite=1  datasel=dreg, goto pcincr

# Increment PC and goto new command; for all commands that use immediate operand - they need additional PC increment !
pcincr:	pcload=1  pcsel=pc, goto fetch

# Set address to immed and goto new command; for jumps to absolute immed address
jump:	pcload=1  pcsel=immed, goto fetch